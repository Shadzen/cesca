@mixin adaptiveStrict($parameter, $value1, $value2) {
    #{$parameter}: calc(100vw / (#{$defaultWidth} / #{$value1})) !important;
    @media (min-aspect-ratio: 21/9) {
        #{$parameter}: calc(75vw / (#{$defaultWidth} / #{$value1})) !important;
    }
    @media screen and (max-width: $mobileWidth + px) {
        #{$parameter}: calc(100vw / (#{$mobileWidth} / #{$value2})) !important;
        @media (min-aspect-ratio: 21/9) {
            #{$parameter}: calc(75vw / (#{$mobileWidth} / #{$value2})) !important;
        }
    }
}

@mixin adaptive($parameter, $value1, $value2) {
    #{$parameter}: calc(100vw / (#{$defaultWidth} / #{$value1}));
    @media (min-aspect-ratio: 21/9) {
        #{$parameter}: calc(75vw / (#{$defaultWidth} / #{$value1}));
    }
    @media screen and (max-width: $mobileWidth + px) {
        #{$parameter}: calc(100vw / (#{$mobileWidth} / #{$value2}));
        @media (min-aspect-ratio: 21/9) {
            #{$parameter}: calc(75vw / (#{$mobileWidth} / #{$value2}));
        }
    }
}

@mixin adaptiveBoxShadow($value1, $value2, $color) {
    box-shadow: inset 0 0 calc(100vw / (#{$defaultWidth} / #{$value1})) $color;
    @media (min-aspect-ratio: 21/9) {
        box-shadow: inset 0 0 calc(75vw / (#{$defaultWidth} / #{$value1})) $color;
    }
    @media screen and (max-width: $mobileWidth + px) {
        box-shadow: inset 0 0 calc(100vw / (#{$mobileWidth} / #{$value2})) $color;
        @media (min-aspect-ratio: 21/9) {
            box-shadow: inset 0 0 calc(75vw / (#{$mobileWidth} / #{$value2})) $color;
        }
    }
}

@mixin adaptiveBlur($value1, $value2) {
    filter: blur( calc(100vw / (#{$defaultWidth} / #{$value1})));
    @media (min-aspect-ratio: 21/9) {
        filter: blur( calc(75vw / (#{$defaultWidth} / #{$value1})));
    }
    @media screen and (max-width: $mobileWidth + px) {
        filter: blur( calc(100vw / (#{$mobileWidth} / #{$value2})));
        @media (min-aspect-ratio: 21/9) {
            filter: blur( calc(75vw / (#{$mobileWidth} / #{$value2})));
        }
    }
}

%defaultPaddings {
    @include adaptive(padding-left, 40, 20);
    @include adaptive(padding-right, 40, 20);
}

%alternatePaddings {
    @include adaptive(padding-left, 30, 10);
    @include adaptive(padding-right, 30, 10);
}

%flexCenter {
    display: flex;
    justify-content: center;
    align-items: center;
}

%flexSpaceBetween {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
}

%flexStart {
    display: flex;
    justify-content: flex-start;
    align-items: center;
}

%absDefault {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

%centerXY {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
}